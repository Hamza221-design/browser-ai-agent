Generate a Playwright test script in Python for the following test case:

IMPORTANT: The target URL for this test is: {url}
Use this exact URL in page.goto() - DO NOT use example.com or any placeholder URLs.

Test Case Details:
- Title: {title}
- Description: {description}
- Test Type: {test_type}
- Element Type: {element_type}
- Test Steps: {test_steps}
- Expected Behavior: {expected_behavior}

HTML Content:
{html_code}

Requirements:
- Use Playwright with Python
- Include proper imports (playwright, pytest)
- Add comments explaining each step
- Handle both positive and negative test cases based on test type
- must add ignore_https_errors=True in the context context = browser.new_context(ignore_https_errors=True) 
- Include proper assertions
- Make the code ready to run
- Use the HTML content to identify selectors
- Set headless=False by default for browser mode
- Add option to run in headless mode via environment variable
- Include proper error handling and timeouts
- Add wait conditions for elements to be ready
- IMPORTANT: Use the exact URL "{url}" in page.goto() - DO NOT use placeholder URLs like example.com
- Replace ALL placeholder URLs with the actual URL: {url}
- Always add raise keyword in the except Exception as e: 

CRITICAL TESTING GUIDELINES:
- For link tests: Check if links exist and are clickable, but DON'T assume they navigate to new pages
- For form tests: Focus on form validation and submission, not necessarily successful redirects
- For navigation tests: Verify elements are present and interactive, not that they change URLs
- Use flexible assertions that don't assume specific URL changes
- Add proper error handling for elements that might not exist
- Use try-catch blocks for potentially failing operations
- Test element visibility and interactivity rather than specific outcomes
- For external links: Check if they open in new tabs/windows instead of expecting navigation
- Use page.wait_for_load_state() after navigation attempts
- Add fallback selectors and multiple ways to find elements

Return only the Python code, no explanation

Generate a complete test function that can be executed with browser mode by default.

# Set headless mode based on environment variable similar to below code 
headless = os.getenv("HEADLESS", "false").lower() == "true"
browser = p.chromium.launch(headless=headless)
context = browser.new_context(ignore_https_errors=True)

do rest of the code 